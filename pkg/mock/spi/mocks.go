// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/machine-controller-manager-provider-alicloud/pkg/spi (interfaces: PluginSPI)

// Package client is a generated GoMock package.
package spi

import (
	reflect "reflect"

	ecs "github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	api "github.com/gardener/machine-controller-manager-provider-alicloud/pkg/alicloud/apis"
	spi "github.com/gardener/machine-controller-manager-provider-alicloud/pkg/spi"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockPluginSPI is a mock of PluginSPI interface
type MockPluginSPI struct {
	ctrl     *gomock.Controller
	recorder *MockPluginSPIMockRecorder
}

// MockPluginSPIMockRecorder is the mock recorder for MockPluginSPI
type MockPluginSPIMockRecorder struct {
	mock *MockPluginSPI
}

// NewMockPluginSPI creates a new mock instance
func NewMockPluginSPI(ctrl *gomock.Controller) *MockPluginSPI {
	mock := &MockPluginSPI{ctrl: ctrl}
	mock.recorder = &MockPluginSPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginSPI) EXPECT() *MockPluginSPIMockRecorder {
	return m.recorder
}

// NewDeleteInstanceRequest mocks base method
func (m *MockPluginSPI) NewDeleteInstanceRequest(arg0 string, arg1 bool) (*ecs.DeleteInstanceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteInstanceRequest", arg0, arg1)
	ret0, _ := ret[0].(*ecs.DeleteInstanceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDeleteInstanceRequest indicates an expected call of NewDeleteInstanceRequest
func (mr *MockPluginSPIMockRecorder) NewDeleteInstanceRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteInstanceRequest", reflect.TypeOf((*MockPluginSPI)(nil).NewDeleteInstanceRequest), arg0, arg1)
}

// NewDescribeInstancesRequest mocks base method
func (m *MockPluginSPI) NewDescribeInstancesRequest(arg0, arg1 string, arg2 map[string]string) (*ecs.DescribeInstancesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDescribeInstancesRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ecs.DescribeInstancesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDescribeInstancesRequest indicates an expected call of NewDescribeInstancesRequest
func (mr *MockPluginSPIMockRecorder) NewDescribeInstancesRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDescribeInstancesRequest", reflect.TypeOf((*MockPluginSPI)(nil).NewDescribeInstancesRequest), arg0, arg1, arg2)
}

// NewECSClient mocks base method
func (m *MockPluginSPI) NewECSClient(arg0 *v1.Secret, arg1 string) (spi.ECSClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewECSClient", arg0, arg1)
	ret0, _ := ret[0].(spi.ECSClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewECSClient indicates an expected call of NewECSClient
func (mr *MockPluginSPIMockRecorder) NewECSClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewECSClient", reflect.TypeOf((*MockPluginSPI)(nil).NewECSClient), arg0, arg1)
}

// NewInstanceDataDisks mocks base method
func (m *MockPluginSPI) NewInstanceDataDisks(arg0 []api.AlicloudDataDisk, arg1 string) []ecs.RunInstancesDataDisk {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInstanceDataDisks", arg0, arg1)
	ret0, _ := ret[0].([]ecs.RunInstancesDataDisk)
	return ret0
}

// NewInstanceDataDisks indicates an expected call of NewInstanceDataDisks
func (mr *MockPluginSPIMockRecorder) NewInstanceDataDisks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInstanceDataDisks", reflect.TypeOf((*MockPluginSPI)(nil).NewInstanceDataDisks), arg0, arg1)
}

// NewRunInstanceTags mocks base method
func (m *MockPluginSPI) NewRunInstanceTags(arg0 map[string]string) ([]ecs.RunInstancesTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRunInstanceTags", arg0)
	ret0, _ := ret[0].([]ecs.RunInstancesTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRunInstanceTags indicates an expected call of NewRunInstanceTags
func (mr *MockPluginSPIMockRecorder) NewRunInstanceTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRunInstanceTags", reflect.TypeOf((*MockPluginSPI)(nil).NewRunInstanceTags), arg0)
}

// NewRunInstancesRequest mocks base method
func (m *MockPluginSPI) NewRunInstancesRequest(arg0 *api.ProviderSpec, arg1 string, arg2 []byte) (*ecs.RunInstancesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRunInstancesRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ecs.RunInstancesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRunInstancesRequest indicates an expected call of NewRunInstancesRequest
func (mr *MockPluginSPIMockRecorder) NewRunInstancesRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRunInstancesRequest", reflect.TypeOf((*MockPluginSPI)(nil).NewRunInstancesRequest), arg0, arg1, arg2)
}
