// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/machine-controller-manager-provider-alicloud/pkg/spi (interfaces: ECSClient)

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	ecs "github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	gomock "github.com/golang/mock/gomock"
)

// MockECSClient is a mock of ECSClient interface
type MockECSClient struct {
	ctrl     *gomock.Controller
	recorder *MockECSClientMockRecorder
}

// MockECSClientMockRecorder is the mock recorder for MockECSClient
type MockECSClientMockRecorder struct {
	mock *MockECSClient
}

// NewMockECSClient creates a new mock instance
func NewMockECSClient(ctrl *gomock.Controller) *MockECSClient {
	mock := &MockECSClient{ctrl: ctrl}
	mock.recorder = &MockECSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockECSClient) EXPECT() *MockECSClientMockRecorder {
	return m.recorder
}

// DeleteInstance mocks base method
func (m *MockECSClient) DeleteInstance(arg0 *ecs.DeleteInstanceRequest) (*ecs.DeleteInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(*ecs.DeleteInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockECSClientMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockECSClient)(nil).DeleteInstance), arg0)
}

// DescribeInstances mocks base method
func (m *MockECSClient) DescribeInstances(arg0 *ecs.DescribeInstancesRequest) (*ecs.DescribeInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstances", arg0)
	ret0, _ := ret[0].(*ecs.DescribeInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances
func (mr *MockECSClientMockRecorder) DescribeInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockECSClient)(nil).DescribeInstances), arg0)
}

// RunInstances mocks base method
func (m *MockECSClient) RunInstances(arg0 *ecs.RunInstancesRequest) (*ecs.RunInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInstances", arg0)
	ret0, _ := ret[0].(*ecs.RunInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInstances indicates an expected call of RunInstances
func (mr *MockECSClientMockRecorder) RunInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInstances", reflect.TypeOf((*MockECSClient)(nil).RunInstances), arg0)
}
